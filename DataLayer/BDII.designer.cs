#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BDII")]
	public partial class BDIIDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertSections(Sections instance);
    partial void UpdateSections(Sections instance);
    partial void DeleteSections(Sections instance);
    partial void InsertSem_Student(Sem_Student instance);
    partial void UpdateSem_Student(Sem_Student instance);
    partial void DeleteSem_Student(Sem_Student instance);
    partial void InsertSems(Sems instance);
    partial void UpdateSems(Sems instance);
    partial void DeleteSems(Sems instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    partial void InsertTopics(Topics instance);
    partial void UpdateTopics(Topics instance);
    partial void DeleteTopics(Topics instance);
    partial void InsertFiles(Files instance);
    partial void UpdateFiles(Files instance);
    partial void DeleteFiles(Files instance);
    partial void InsertStudents_Groups(Students_Groups instance);
    partial void UpdateStudents_Groups(Students_Groups instance);
    partial void DeleteStudents_Groups(Students_Groups instance);
    partial void InsertPresence(Presence instance);
    partial void UpdatePresence(Presence instance);
    partial void DeletePresence(Presence instance);
    #endregion
		
		public BDIIDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.BDIIConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BDIIDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BDIIDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BDIIDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BDIIDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Sections> Sections
		{
			get
			{
				return this.GetTable<Sections>();
			}
		}
		
		public System.Data.Linq.Table<Sem_Student> Sem_Student
		{
			get
			{
				return this.GetTable<Sem_Student>();
			}
		}
		
		public System.Data.Linq.Table<Sems> Sems
		{
			get
			{
				return this.GetTable<Sems>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
		
		public System.Data.Linq.Table<Topics> Topics
		{
			get
			{
				return this.GetTable<Topics>();
			}
		}
		
		public System.Data.Linq.Table<Files> Files
		{
			get
			{
				return this.GetTable<Files>();
			}
		}
		
		public System.Data.Linq.Table<Students_Groups> Students_Groups
		{
			get
			{
				return this.GetTable<Students_Groups>();
			}
		}
		
		public System.Data.Linq.Table<Presence> Presence
		{
			get
			{
				return this.GetTable<Presence>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Login;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Password;
		
		private string _TypeOfUser;
		
		private EntitySet<Students> _Students;
		
		private EntitySet<Teachers> _Teachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTypeOfUserChanging(string value);
    partial void OnTypeOfUserChanged();
    #endregion
		
		public Users()
		{
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			this._Teachers = new EntitySet<Teachers>(new Action<Teachers>(this.attach_Teachers), new Action<Teachers>(this.detach_Teachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfUser", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string TypeOfUser
		{
			get
			{
				return this._TypeOfUser;
			}
			set
			{
				if ((this._TypeOfUser != value))
				{
					this.OnTypeOfUserChanging(value);
					this.SendPropertyChanging();
					this._TypeOfUser = value;
					this.SendPropertyChanged("TypeOfUser");
					this.OnTypeOfUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Students", Storage="_Students", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Teachers", Storage="_Teachers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Teachers> Teachers
		{
			get
			{
				return this._Teachers;
			}
			set
			{
				this._Teachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Teachers(Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Teachers(Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sections")]
	public partial class Sections : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _GroupSize;
		
		private System.Nullable<int> _TopicID;
		
		private int _SemID;
		
		private string _Status;
		
		private EntitySet<Files> _Files;
		
		private EntitySet<Students_Groups> _Students_Groups;
		
		private EntityRef<Sems> _Sems;
		
		private EntityRef<Topics> _Topics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupSizeChanging(byte value);
    partial void OnGroupSizeChanged();
    partial void OnTopicIDChanging(System.Nullable<int> value);
    partial void OnTopicIDChanged();
    partial void OnSemIDChanging(int value);
    partial void OnSemIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Sections()
		{
			this._Files = new EntitySet<Files>(new Action<Files>(this.attach_Files), new Action<Files>(this.detach_Files));
			this._Students_Groups = new EntitySet<Students_Groups>(new Action<Students_Groups>(this.attach_Students_Groups), new Action<Students_Groups>(this.detach_Students_Groups));
			this._Sems = default(EntityRef<Sems>);
			this._Topics = default(EntityRef<Topics>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupSize", DbType="TinyInt NOT NULL")]
		public byte GroupSize
		{
			get
			{
				return this._GroupSize;
			}
			set
			{
				if ((this._GroupSize != value))
				{
					this.OnGroupSizeChanging(value);
					this.SendPropertyChanging();
					this._GroupSize = value;
					this.SendPropertyChanged("GroupSize");
					this.OnGroupSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicID", DbType="Int")]
		public System.Nullable<int> TopicID
		{
			get
			{
				return this._TopicID;
			}
			set
			{
				if ((this._TopicID != value))
				{
					if (this._Topics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIDChanging(value);
					this.SendPropertyChanging();
					this._TopicID = value;
					this.SendPropertyChanged("TopicID");
					this.OnTopicIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemID", DbType="Int NOT NULL")]
		public int SemID
		{
			get
			{
				return this._SemID;
			}
			set
			{
				if ((this._SemID != value))
				{
					if (this._Sems.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemIDChanging(value);
					this.SendPropertyChanging();
					this._SemID = value;
					this.SendPropertyChanged("SemID");
					this.OnSemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sections_Files", Storage="_Files", ThisKey="ID", OtherKey="SectionID")]
		public EntitySet<Files> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sections_Students_Groups", Storage="_Students_Groups", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Students_Groups> Students_Groups
		{
			get
			{
				return this._Students_Groups;
			}
			set
			{
				this._Students_Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sems_Sections", Storage="_Sems", ThisKey="SemID", OtherKey="ID", IsForeignKey=true)]
		public Sems Sems
		{
			get
			{
				return this._Sems.Entity;
			}
			set
			{
				Sems previousValue = this._Sems.Entity;
				if (((previousValue != value) 
							|| (this._Sems.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sems.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Sems.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._SemID = value.ID;
					}
					else
					{
						this._SemID = default(int);
					}
					this.SendPropertyChanged("Sems");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topics_Sections", Storage="_Topics", ThisKey="TopicID", OtherKey="ID", IsForeignKey=true)]
		public Topics Topics
		{
			get
			{
				return this._Topics.Entity;
			}
			set
			{
				Topics previousValue = this._Topics.Entity;
				if (((previousValue != value) 
							|| (this._Topics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topics.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Topics.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._TopicID = value.ID;
					}
					else
					{
						this._TopicID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Topics");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(Files entity)
		{
			this.SendPropertyChanging();
			entity.Sections = this;
		}
		
		private void detach_Files(Files entity)
		{
			this.SendPropertyChanging();
			entity.Sections = null;
		}
		
		private void attach_Students_Groups(Students_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Sections = this;
		}
		
		private void detach_Students_Groups(Students_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Sections = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sem_Student")]
	public partial class Sem_Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SemID;
		
		private string _StudentAlbumNr;
		
		private EntityRef<Sems> _Sems;
		
		private EntityRef<Students> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSemIDChanging(int value);
    partial void OnSemIDChanged();
    partial void OnStudentAlbumNrChanging(string value);
    partial void OnStudentAlbumNrChanged();
    #endregion
		
		public Sem_Student()
		{
			this._Sems = default(EntityRef<Sems>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemID", DbType="Int NOT NULL")]
		public int SemID
		{
			get
			{
				return this._SemID;
			}
			set
			{
				if ((this._SemID != value))
				{
					if (this._Sems.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemIDChanging(value);
					this.SendPropertyChanging();
					this._SemID = value;
					this.SendPropertyChanged("SemID");
					this.OnSemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentAlbumNr", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string StudentAlbumNr
		{
			get
			{
				return this._StudentAlbumNr;
			}
			set
			{
				if ((this._StudentAlbumNr != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentAlbumNrChanging(value);
					this.SendPropertyChanging();
					this._StudentAlbumNr = value;
					this.SendPropertyChanged("StudentAlbumNr");
					this.OnStudentAlbumNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sems_Sem_Student", Storage="_Sems", ThisKey="SemID", OtherKey="ID", IsForeignKey=true)]
		public Sems Sems
		{
			get
			{
				return this._Sems.Entity;
			}
			set
			{
				Sems previousValue = this._Sems.Entity;
				if (((previousValue != value) 
							|| (this._Sems.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sems.Entity = null;
						previousValue.Sem_Student.Remove(this);
					}
					this._Sems.Entity = value;
					if ((value != null))
					{
						value.Sem_Student.Add(this);
						this._SemID = value.ID;
					}
					else
					{
						this._SemID = default(int);
					}
					this.SendPropertyChanged("Sems");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Sem_Student", Storage="_Students", ThisKey="StudentAlbumNr", OtherKey="AlbumNr", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Sem_Student.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Sem_Student.Add(this);
						this._StudentAlbumNr = value.AlbumNr;
					}
					else
					{
						this._StudentAlbumNr = default(string);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sems")]
	public partial class Sems : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _StudyField;
		
		private short _Year;
		
		private short _Sem;
		
		private EntitySet<Sections> _Sections;
		
		private EntitySet<Sem_Student> _Sem_Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyFieldChanging(string value);
    partial void OnStudyFieldChanged();
    partial void OnYearChanging(short value);
    partial void OnYearChanged();
    partial void OnSemChanging(short value);
    partial void OnSemChanged();
    #endregion
		
		public Sems()
		{
			this._Sections = new EntitySet<Sections>(new Action<Sections>(this.attach_Sections), new Action<Sections>(this.detach_Sections));
			this._Sem_Student = new EntitySet<Sem_Student>(new Action<Sem_Student>(this.attach_Sem_Student), new Action<Sem_Student>(this.detach_Sem_Student));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyField", DbType="VarChar(127) NOT NULL", CanBeNull=false)]
		public string StudyField
		{
			get
			{
				return this._StudyField;
			}
			set
			{
				if ((this._StudyField != value))
				{
					this.OnStudyFieldChanging(value);
					this.SendPropertyChanging();
					this._StudyField = value;
					this.SendPropertyChanged("StudyField");
					this.OnStudyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt NOT NULL")]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sem", DbType="SmallInt NOT NULL")]
		public short Sem
		{
			get
			{
				return this._Sem;
			}
			set
			{
				if ((this._Sem != value))
				{
					this.OnSemChanging(value);
					this.SendPropertyChanging();
					this._Sem = value;
					this.SendPropertyChanged("Sem");
					this.OnSemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sems_Sections", Storage="_Sections", ThisKey="ID", OtherKey="SemID")]
		public EntitySet<Sections> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sems_Sem_Student", Storage="_Sem_Student", ThisKey="ID", OtherKey="SemID")]
		public EntitySet<Sem_Student> Sem_Student
		{
			get
			{
				return this._Sem_Student;
			}
			set
			{
				this._Sem_Student.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sections(Sections entity)
		{
			this.SendPropertyChanging();
			entity.Sems = this;
		}
		
		private void detach_Sections(Sections entity)
		{
			this.SendPropertyChanging();
			entity.Sems = null;
		}
		
		private void attach_Sem_Student(Sem_Student entity)
		{
			this.SendPropertyChanging();
			entity.Sems = this;
		}
		
		private void detach_Sem_Student(Sem_Student entity)
		{
			this.SendPropertyChanging();
			entity.Sems = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AlbumNr;
		
		private int _UserID;
		
		private EntitySet<Sem_Student> _Sem_Student;
		
		private EntitySet<Students_Groups> _Students_Groups;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumNrChanging(string value);
    partial void OnAlbumNrChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Students()
		{
			this._Sem_Student = new EntitySet<Sem_Student>(new Action<Sem_Student>(this.attach_Sem_Student), new Action<Sem_Student>(this.detach_Sem_Student));
			this._Students_Groups = new EntitySet<Students_Groups>(new Action<Students_Groups>(this.attach_Students_Groups), new Action<Students_Groups>(this.detach_Students_Groups));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumNr", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AlbumNr
		{
			get
			{
				return this._AlbumNr;
			}
			set
			{
				if ((this._AlbumNr != value))
				{
					this.OnAlbumNrChanging(value);
					this.SendPropertyChanging();
					this._AlbumNr = value;
					this.SendPropertyChanged("AlbumNr");
					this.OnAlbumNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Sem_Student", Storage="_Sem_Student", ThisKey="AlbumNr", OtherKey="StudentAlbumNr")]
		public EntitySet<Sem_Student> Sem_Student
		{
			get
			{
				return this._Sem_Student;
			}
			set
			{
				this._Sem_Student.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Students_Groups", Storage="_Students_Groups", ThisKey="AlbumNr", OtherKey="StudentAlbumNr")]
		public EntitySet<Students_Groups> Students_Groups
		{
			get
			{
				return this._Students_Groups;
			}
			set
			{
				this._Students_Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Students", Storage="_Users", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sem_Student(Sem_Student entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Sem_Student(Sem_Student entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Students_Groups(Students_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Students_Groups(Students_Groups entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AcademicDegree;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<Topics> _Topics;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAcademicDegreeChanging(string value);
    partial void OnAcademicDegreeChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public Teachers()
		{
			this._Topics = new EntitySet<Topics>(new Action<Topics>(this.attach_Topics), new Action<Topics>(this.detach_Topics));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicDegree", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string AcademicDegree
		{
			get
			{
				return this._AcademicDegree;
			}
			set
			{
				if ((this._AcademicDegree != value))
				{
					this.OnAcademicDegreeChanging(value);
					this.SendPropertyChanging();
					this._AcademicDegree = value;
					this.SendPropertyChanged("AcademicDegree");
					this.OnAcademicDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Topics", Storage="_Topics", ThisKey="ID", OtherKey="TeacherID")]
		public EntitySet<Topics> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Teachers", Storage="_Users", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Teachers.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Teachers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Topics(Topics entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_Topics(Topics entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Topics")]
	public partial class Topics : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Status;
		
		private int _TeacherID;
		
		private EntitySet<Sections> _Sections;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    #endregion
		
		public Topics()
		{
			this._Sections = new EntitySet<Sections>(new Action<Sections>(this.attach_Sections), new Action<Sections>(this.detach_Sections));
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topics_Sections", Storage="_Sections", ThisKey="ID", OtherKey="TopicID")]
		public EntitySet<Sections> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Topics", Storage="_Teachers", ThisKey="TeacherID", OtherKey="ID", IsForeignKey=true)]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._TeacherID = value.ID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sections(Sections entity)
		{
			this.SendPropertyChanging();
			entity.Topics = this;
		}
		
		private void detach_Sections(Sections entity)
		{
			this.SendPropertyChanging();
			entity.Topics = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Files")]
	public partial class Files : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private System.Data.Linq.Binary _File;
		
		private int _SectionID;
		
		private EntityRef<Sections> _Sections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnFileChanging(System.Data.Linq.Binary value);
    partial void OnFileChanged();
    partial void OnSectionIDChanging(int value);
    partial void OnSectionIDChanged();
    #endregion
		
		public Files()
		{
			this._Sections = default(EntityRef<Sections>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionID", DbType="Int NOT NULL")]
		public int SectionID
		{
			get
			{
				return this._SectionID;
			}
			set
			{
				if ((this._SectionID != value))
				{
					if (this._Sections.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIDChanging(value);
					this.SendPropertyChanging();
					this._SectionID = value;
					this.SendPropertyChanged("SectionID");
					this.OnSectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sections_Files", Storage="_Sections", ThisKey="SectionID", OtherKey="ID", IsForeignKey=true)]
		public Sections Sections
		{
			get
			{
				return this._Sections.Entity;
			}
			set
			{
				Sections previousValue = this._Sections.Entity;
				if (((previousValue != value) 
							|| (this._Sections.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sections.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Sections.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._SectionID = value.ID;
					}
					else
					{
						this._SectionID = default(int);
					}
					this.SendPropertyChanged("Sections");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students_Groups")]
	public partial class Students_Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GroupID;
		
		private string _StudentAlbumNr;
		
		private System.Nullable<double> _Mark;
		
		private EntitySet<Presence> _Presence;
		
		private EntityRef<Sections> _Sections;
		
		private EntityRef<Students> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnStudentAlbumNrChanging(string value);
    partial void OnStudentAlbumNrChanged();
    partial void OnMarkChanging(System.Nullable<double> value);
    partial void OnMarkChanged();
    #endregion
		
		public Students_Groups()
		{
			this._Presence = new EntitySet<Presence>(new Action<Presence>(this.attach_Presence), new Action<Presence>(this.detach_Presence));
			this._Sections = default(EntityRef<Sections>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Sections.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentAlbumNr", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string StudentAlbumNr
		{
			get
			{
				return this._StudentAlbumNr;
			}
			set
			{
				if ((this._StudentAlbumNr != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentAlbumNrChanging(value);
					this.SendPropertyChanging();
					this._StudentAlbumNr = value;
					this.SendPropertyChanged("StudentAlbumNr");
					this.OnStudentAlbumNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Float")]
		public System.Nullable<double> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Groups_Presence", Storage="_Presence", ThisKey="ID", OtherKey="Group_StudentID")]
		public EntitySet<Presence> Presence
		{
			get
			{
				return this._Presence;
			}
			set
			{
				this._Presence.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sections_Students_Groups", Storage="_Sections", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public Sections Sections
		{
			get
			{
				return this._Sections.Entity;
			}
			set
			{
				Sections previousValue = this._Sections.Entity;
				if (((previousValue != value) 
							|| (this._Sections.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sections.Entity = null;
						previousValue.Students_Groups.Remove(this);
					}
					this._Sections.Entity = value;
					if ((value != null))
					{
						value.Students_Groups.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Sections");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Students_Groups", Storage="_Students", ThisKey="StudentAlbumNr", OtherKey="AlbumNr", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Students_Groups.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Students_Groups.Add(this);
						this._StudentAlbumNr = value.AlbumNr;
					}
					else
					{
						this._StudentAlbumNr = default(string);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Presence(Presence entity)
		{
			this.SendPropertyChanging();
			entity.Students_Groups = this;
		}
		
		private void detach_Presence(Presence entity)
		{
			this.SendPropertyChanging();
			entity.Students_Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Presence")]
	public partial class Presence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Group_StudentID;
		
		private System.DateTime _Date;
		
		private bool _Present;
		
		private EntityRef<Students_Groups> _Students_Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroup_StudentIDChanging(int value);
    partial void OnGroup_StudentIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnPresentChanging(bool value);
    partial void OnPresentChanged();
    #endregion
		
		public Presence()
		{
			this._Students_Groups = default(EntityRef<Students_Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_StudentID", DbType="Int NOT NULL")]
		public int Group_StudentID
		{
			get
			{
				return this._Group_StudentID;
			}
			set
			{
				if ((this._Group_StudentID != value))
				{
					if (this._Students_Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroup_StudentIDChanging(value);
					this.SendPropertyChanging();
					this._Group_StudentID = value;
					this.SendPropertyChanged("Group_StudentID");
					this.OnGroup_StudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Present", DbType="Bit NOT NULL")]
		public bool Present
		{
			get
			{
				return this._Present;
			}
			set
			{
				if ((this._Present != value))
				{
					this.OnPresentChanging(value);
					this.SendPropertyChanging();
					this._Present = value;
					this.SendPropertyChanged("Present");
					this.OnPresentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Groups_Presence", Storage="_Students_Groups", ThisKey="Group_StudentID", OtherKey="ID", IsForeignKey=true)]
		public Students_Groups Students_Groups
		{
			get
			{
				return this._Students_Groups.Entity;
			}
			set
			{
				Students_Groups previousValue = this._Students_Groups.Entity;
				if (((previousValue != value) 
							|| (this._Students_Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students_Groups.Entity = null;
						previousValue.Presence.Remove(this);
					}
					this._Students_Groups.Entity = value;
					if ((value != null))
					{
						value.Presence.Add(this);
						this._Group_StudentID = value.ID;
					}
					else
					{
						this._Group_StudentID = default(int);
					}
					this.SendPropertyChanged("Students_Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
